
gpio-driver-assembly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  08000398  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000398  08000398  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000398  08000398  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000398  08000398  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003a0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003a4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003a4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_line   00001b78  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00001171  00000000  00000000  00021bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000003de  00000000  00000000  00022d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00023100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000bff7f  00000000  00000000  000232c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000168  00000000  00000000  000e3240  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000058a  00000000  00000000  000e33a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000504  00000000  00000000  000e39b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000380 	.word	0x08000380

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000380 	.word	0x08000380

08000204 <main>:

		.section .text
		.globl main

main:
  		BL		GPIO_init
 8000204:	f000 f800 	bl	8000208 <GPIO_init>

08000208 <GPIO_init>:



GPIO_init:

		LDR		R0,=RCC_AHB1ENR
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <GPIO_init+0x20>)

		LDR 	R1,[R0]
 800020a:	6801      	ldr	r1, [r0, #0]

		ORR 	R1,#GPIOA_EN
 800020c:	f041 0101 	orr.w	r1, r1, #1

		STR		R1,[R0]
 8000210:	6001      	str	r1, [r0, #0]



		//GPIOA->MODER  |= MODER5_OUT
		LDR		R0,=GPIOA_MODER
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <GPIO_init+0x24>)
		LDR		R1,[R0]
 8000214:	6801      	ldr	r1, [r0, #0]
		ORR		R1,#MODER5_OUT
 8000216:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
		STR		R1,[R0]
 800021a:	6001      	str	r1, [r0, #0]


		//GPIOA->ODR |= LED_ON
		LDR		R0,=GPIOA_ODR
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <GPIO_init+0x28>)
		LDR		R1,=LED_ON
 800021e:	f04f 0120 	mov.w	r1, #32
		STR		R1,[R0]
 8000222:	6001      	str	r1, [r0, #0]

		BX		LR
 8000224:	4770      	bx	lr
 8000226:	0000      	.short	0x0000
		LDR		R0,=RCC_AHB1ENR
 8000228:	40023830 	.word	0x40023830
		LDR		R0,=GPIOA_MODER
 800022c:	40020000 	.word	0x40020000
		LDR		R0,=GPIOA_ODR
 8000230:	40020014 	.word	0x40020014

08000234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr

08000242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000242:	b480      	push	{r7}
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000246:	e7fe      	b.n	8000246 <HardFault_Handler+0x4>

08000248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800024c:	e7fe      	b.n	800024c <MemManage_Handler+0x4>

0800024e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800024e:	b480      	push	{r7}
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000252:	e7fe      	b.n	8000252 <BusFault_Handler+0x4>

08000254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000258:	e7fe      	b.n	8000258 <UsageFault_Handler+0x4>

0800025a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800025a:	b480      	push	{r7}
 800025c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr

08000268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr

08000284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000288:	f000 f842 	bl	8000310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <SystemInit+0x28>)
 8000296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029a:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <SystemInit+0x28>)
 800029c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <SystemInit+0x28>)
 80002a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002aa:	609a      	str	r2, [r3, #8]
#endif
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002c2:	e003      	b.n	80002cc <LoopCopyDataInit>

080002c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ca:	3104      	adds	r1, #4

080002cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002cc:	480b      	ldr	r0, [pc, #44]	; (80002fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002d4:	d3f6      	bcc.n	80002c4 <CopyDataInit>
  ldr  r2, =_sbss
 80002d6:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002d8:	e002      	b.n	80002e0 <LoopFillZerobss>

080002da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002dc:	f842 3b04 	str.w	r3, [r2], #4

080002e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002e4:	d3f9      	bcc.n	80002da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002e6:	f7ff ffd3 	bl	8000290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ea:	f000 f825 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002ee:	f7ff ff89 	bl	8000204 <main>
  bx  lr    
 80002f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80002f8:	080003a0 	.word	0x080003a0
  ldr  r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000300:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000304:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000308:	20000024 	.word	0x20000024

0800030c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC_IRQHandler>
	...

08000310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x20>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	461a      	mov	r2, r3
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <HAL_IncTick+0x24>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4413      	add	r3, r2
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <HAL_IncTick+0x24>)
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000000 	.word	0x20000000
 8000334:	20000020 	.word	0x20000020

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	4e0d      	ldr	r6, [pc, #52]	; (8000370 <__libc_init_array+0x38>)
 800033c:	4c0d      	ldr	r4, [pc, #52]	; (8000374 <__libc_init_array+0x3c>)
 800033e:	1ba4      	subs	r4, r4, r6
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	2500      	movs	r5, #0
 8000344:	42a5      	cmp	r5, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	4e0b      	ldr	r6, [pc, #44]	; (8000378 <__libc_init_array+0x40>)
 800034a:	4c0c      	ldr	r4, [pc, #48]	; (800037c <__libc_init_array+0x44>)
 800034c:	f000 f818 	bl	8000380 <_init>
 8000350:	1ba4      	subs	r4, r4, r6
 8000352:	10a4      	asrs	r4, r4, #2
 8000354:	2500      	movs	r5, #0
 8000356:	42a5      	cmp	r5, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000360:	4798      	blx	r3
 8000362:	3501      	adds	r5, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800036a:	4798      	blx	r3
 800036c:	3501      	adds	r5, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
