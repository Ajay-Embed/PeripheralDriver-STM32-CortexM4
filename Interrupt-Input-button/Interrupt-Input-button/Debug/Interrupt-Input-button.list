
Interrupt-Input-button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002944  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c48  08002c48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c50  08002c50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08002c64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08002c64  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064b2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000127e  00000000  00000000  000264ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000668  00000000  00000000  00027770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c0  00000000  00000000  00027dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ff37  00000000  00000000  00028398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007398  00000000  00000000  000482cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c34a1  00000000  00000000  0004f667  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00112b08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018ec  00000000  00000000  00112b84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002af0 	.word	0x08002af0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002af0 	.word	0x08002af0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f94d 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 f9c8 	bl	80028cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f994 	bl	8000894 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f942 	bl	800080c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f7ff ff8e 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b07      	cmp	r3, #7
 80007d8:	d00f      	beq.n	80007fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b06      	cmp	r3, #6
 80007de:	d00c      	beq.n	80007fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b05      	cmp	r3, #5
 80007e4:	d009      	beq.n	80007fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d006      	beq.n	80007fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d003      	beq.n	80007fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007f2:	2192      	movs	r1, #146	; 0x92
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80007f6:	f002 f85e 	bl	80028b6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff16 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	08002b08 	.word	0x08002b08

0800080c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d903      	bls.n	800082c <HAL_NVIC_SetPriority+0x20>
 8000824:	21aa      	movs	r1, #170	; 0xaa
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <HAL_NVIC_SetPriority+0x54>)
 8000828:	f002 f845 	bl	80028b6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	2b0f      	cmp	r3, #15
 8000830:	d903      	bls.n	800083a <HAL_NVIC_SetPriority+0x2e>
 8000832:	21ab      	movs	r1, #171	; 0xab
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <HAL_NVIC_SetPriority+0x54>)
 8000836:	f002 f83e 	bl	80028b6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083a:	f7ff ff1b 	bl	8000674 <__NVIC_GetPriorityGrouping>
 800083e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	6978      	ldr	r0, [r7, #20]
 8000846:	f7ff ff6b 	bl	8000720 <NVIC_EncodePriority>
 800084a:	4602      	mov	r2, r0
 800084c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff3a 	bl	80006cc <__NVIC_SetPriority>
}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08002b08 	.word	0x08002b08

08000864 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	da03      	bge.n	800087e <HAL_NVIC_EnableIRQ+0x1a>
 8000876:	21be      	movs	r1, #190	; 0xbe
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <HAL_NVIC_EnableIRQ+0x2c>)
 800087a:	f002 f81c 	bl	80028b6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff04 	bl	8000690 <__NVIC_EnableIRQ>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08002b08 	.word	0x08002b08

08000894 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff73 	bl	8000788 <SysTick_Config>
 80008a2:	4603      	mov	r3, r0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a3f      	ldr	r2, [pc, #252]	; (80009c4 <HAL_GPIO_Init+0x118>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d01f      	beq.n	800090a <HAL_GPIO_Init+0x5e>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a3e      	ldr	r2, [pc, #248]	; (80009c8 <HAL_GPIO_Init+0x11c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d01b      	beq.n	800090a <HAL_GPIO_Init+0x5e>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a3d      	ldr	r2, [pc, #244]	; (80009cc <HAL_GPIO_Init+0x120>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d017      	beq.n	800090a <HAL_GPIO_Init+0x5e>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a3c      	ldr	r2, [pc, #240]	; (80009d0 <HAL_GPIO_Init+0x124>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d013      	beq.n	800090a <HAL_GPIO_Init+0x5e>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a3b      	ldr	r2, [pc, #236]	; (80009d4 <HAL_GPIO_Init+0x128>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d00f      	beq.n	800090a <HAL_GPIO_Init+0x5e>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a3a      	ldr	r2, [pc, #232]	; (80009d8 <HAL_GPIO_Init+0x12c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d00b      	beq.n	800090a <HAL_GPIO_Init+0x5e>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a39      	ldr	r2, [pc, #228]	; (80009dc <HAL_GPIO_Init+0x130>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d007      	beq.n	800090a <HAL_GPIO_Init+0x5e>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a38      	ldr	r2, [pc, #224]	; (80009e0 <HAL_GPIO_Init+0x134>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d003      	beq.n	800090a <HAL_GPIO_Init+0x5e>
 8000902:	21b3      	movs	r1, #179	; 0xb3
 8000904:	4837      	ldr	r0, [pc, #220]	; (80009e4 <HAL_GPIO_Init+0x138>)
 8000906:	f001 ffd6 	bl	80028b6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	b29b      	uxth	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d005      	beq.n	8000920 <HAL_GPIO_Init+0x74>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	0c1b      	lsrs	r3, r3, #16
 800091a:	041b      	lsls	r3, r3, #16
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <HAL_GPIO_Init+0x7c>
 8000920:	21b4      	movs	r1, #180	; 0xb4
 8000922:	4830      	ldr	r0, [pc, #192]	; (80009e4 <HAL_GPIO_Init+0x138>)
 8000924:	f001 ffc7 	bl	80028b6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d035      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d031      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b11      	cmp	r3, #17
 800093e:	d02d      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d029      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b12      	cmp	r3, #18
 800094e:	d025      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <HAL_GPIO_Init+0x13c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d020      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	4a23      	ldr	r2, [pc, #140]	; (80009ec <HAL_GPIO_Init+0x140>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d01b      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <HAL_GPIO_Init+0x144>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d016      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <HAL_GPIO_Init+0x148>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d011      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <HAL_GPIO_Init+0x14c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00c      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <HAL_GPIO_Init+0x150>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d007      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b03      	cmp	r3, #3
 8000992:	d003      	beq.n	800099c <HAL_GPIO_Init+0xf0>
 8000994:	21b5      	movs	r1, #181	; 0xb5
 8000996:	4813      	ldr	r0, [pc, #76]	; (80009e4 <HAL_GPIO_Init+0x138>)
 8000998:	f001 ff8d 	bl	80028b6 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d00b      	beq.n	80009bc <HAL_GPIO_Init+0x110>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d007      	beq.n	80009bc <HAL_GPIO_Init+0x110>
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d003      	beq.n	80009bc <HAL_GPIO_Init+0x110>
 80009b4:	21b6      	movs	r1, #182	; 0xb6
 80009b6:	480b      	ldr	r0, [pc, #44]	; (80009e4 <HAL_GPIO_Init+0x138>)
 80009b8:	f001 ff7d 	bl	80028b6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	e286      	b.n	8000ed0 <HAL_GPIO_Init+0x624>
 80009c2:	bf00      	nop
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40021400 	.word	0x40021400
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40021c00 	.word	0x40021c00
 80009e4:	08002b44 	.word	0x08002b44
 80009e8:	10110000 	.word	0x10110000
 80009ec:	10210000 	.word	0x10210000
 80009f0:	10310000 	.word	0x10310000
 80009f4:	10120000 	.word	0x10120000
 80009f8:	10220000 	.word	0x10220000
 80009fc:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a00:	2201      	movs	r2, #1
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	697a      	ldr	r2, [r7, #20]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	f040 8256 	bne.w	8000eca <HAL_GPIO_Init+0x61e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d00b      	beq.n	8000a3e <HAL_GPIO_Init+0x192>
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_Init+0x192>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a32:	2b11      	cmp	r3, #17
 8000a34:	d003      	beq.n	8000a3e <HAL_GPIO_Init+0x192>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	2b12      	cmp	r3, #18
 8000a3c:	d144      	bne.n	8000ac8 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00f      	beq.n	8000a66 <HAL_GPIO_Init+0x1ba>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d00b      	beq.n	8000a66 <HAL_GPIO_Init+0x1ba>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d007      	beq.n	8000a66 <HAL_GPIO_Init+0x1ba>
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_Init+0x1ba>
 8000a5e:	21c8      	movs	r1, #200	; 0xc8
 8000a60:	489f      	ldr	r0, [pc, #636]	; (8000ce0 <HAL_GPIO_Init+0x434>)
 8000a62:	f001 ff28 	bl	80028b6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	2203      	movs	r2, #3
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68da      	ldr	r2, [r3, #12]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	091b      	lsrs	r3, r3, #4
 8000ab2:	f003 0201 	and.w	r2, r3, #1
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d004      	beq.n	8000b0a <HAL_GPIO_Init+0x25e>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b12      	cmp	r3, #18
 8000b06:	f040 8111 	bne.w	8000d2c <HAL_GPIO_Init+0x480>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 80e8 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b09      	cmp	r3, #9
 8000b1a:	f000 80e3 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 80de 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f000 80d9 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 80d4 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f000 80cf 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	f000 80ca 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	f000 80c5 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	f000 80c0 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	f000 80bb 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	f000 80b6 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	f000 80b1 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	f000 80ac 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	f000 80a7 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	f000 80a2 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	2b05      	cmp	r3, #5
 8000ba6:	f000 809d 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	2b05      	cmp	r3, #5
 8000bb0:	f000 8098 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	2b09      	cmp	r3, #9
 8000bba:	f000 8093 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	f000 808e 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	2b09      	cmp	r3, #9
 8000bce:	f000 8089 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691b      	ldr	r3, [r3, #16]
 8000bd6:	2b07      	cmp	r3, #7
 8000bd8:	f000 8084 	beq.w	8000ce4 <HAL_GPIO_Init+0x438>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	2b07      	cmp	r3, #7
 8000be2:	d07f      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b07      	cmp	r3, #7
 8000bea:	d07b      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d077      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d073      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	2b08      	cmp	r3, #8
 8000c02:	d06f      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	2b09      	cmp	r3, #9
 8000c0a:	d06b      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	2b09      	cmp	r3, #9
 8000c12:	d067      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	2b0a      	cmp	r3, #10
 8000c1a:	d063      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	2b0a      	cmp	r3, #10
 8000c22:	d05f      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	2b0b      	cmp	r3, #11
 8000c2a:	d05b      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b0c      	cmp	r3, #12
 8000c32:	d057      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	2b0c      	cmp	r3, #12
 8000c3a:	d053      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	2b0d      	cmp	r3, #13
 8000c42:	d04f      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d04b      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	2b05      	cmp	r3, #5
 8000c52:	d047      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b0c      	cmp	r3, #12
 8000c5a:	d043      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b06      	cmp	r3, #6
 8000c62:	d03f      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d03b      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d037      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d033      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	2b06      	cmp	r3, #6
 8000c82:	d02f      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	2b06      	cmp	r3, #6
 8000c8a:	d02b      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	d027      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	2b07      	cmp	r3, #7
 8000c9a:	d023      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	d01f      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d01b      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d017      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d013      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	2b09      	cmp	r3, #9
 8000cc2:	d00f      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b0a      	cmp	r3, #10
 8000cca:	d00b      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	2b0a      	cmp	r3, #10
 8000cd2:	d007      	beq.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000cd4:	21e0      	movs	r1, #224	; 0xe0
 8000cd6:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <HAL_GPIO_Init+0x434>)
 8000cd8:	f001 fded 	bl	80028b6 <assert_failed>
 8000cdc:	e002      	b.n	8000ce4 <HAL_GPIO_Init+0x438>
 8000cde:	bf00      	nop
 8000ce0:	08002b44 	.word	0x08002b44
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	08da      	lsrs	r2, r3, #3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3208      	adds	r2, #8
 8000cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	08da      	lsrs	r2, r3, #3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3208      	adds	r2, #8
 8000d26:	69b9      	ldr	r1, [r7, #24]
 8000d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0203 	and.w	r2, r3, #3
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 80ae 	beq.w	8000eca <HAL_GPIO_Init+0x61e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b5b      	ldr	r3, [pc, #364]	; (8000ee0 <HAL_GPIO_Init+0x634>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a5a      	ldr	r2, [pc, #360]	; (8000ee0 <HAL_GPIO_Init+0x634>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <HAL_GPIO_Init+0x634>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8a:	4a56      	ldr	r2, [pc, #344]	; (8000ee4 <HAL_GPIO_Init+0x638>)
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_GPIO_Init+0x63c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d025      	beq.n	8000e02 <HAL_GPIO_Init+0x556>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <HAL_GPIO_Init+0x640>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d01f      	beq.n	8000dfe <HAL_GPIO_Init+0x552>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4b      	ldr	r2, [pc, #300]	; (8000ef0 <HAL_GPIO_Init+0x644>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d019      	beq.n	8000dfa <HAL_GPIO_Init+0x54e>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4a      	ldr	r2, [pc, #296]	; (8000ef4 <HAL_GPIO_Init+0x648>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0x54a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a49      	ldr	r2, [pc, #292]	; (8000ef8 <HAL_GPIO_Init+0x64c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d00d      	beq.n	8000df2 <HAL_GPIO_Init+0x546>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a48      	ldr	r2, [pc, #288]	; (8000efc <HAL_GPIO_Init+0x650>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d007      	beq.n	8000dee <HAL_GPIO_Init+0x542>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_GPIO_Init+0x654>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <HAL_GPIO_Init+0x53e>
 8000de6:	2306      	movs	r3, #6
 8000de8:	e00c      	b.n	8000e04 <HAL_GPIO_Init+0x558>
 8000dea:	2307      	movs	r3, #7
 8000dec:	e00a      	b.n	8000e04 <HAL_GPIO_Init+0x558>
 8000dee:	2305      	movs	r3, #5
 8000df0:	e008      	b.n	8000e04 <HAL_GPIO_Init+0x558>
 8000df2:	2304      	movs	r3, #4
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x558>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x558>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x558>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x558>
 8000e02:	2300      	movs	r3, #0
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	f002 0203 	and.w	r2, r2, #3
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4093      	lsls	r3, r2
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e14:	4933      	ldr	r1, [pc, #204]	; (8000ee4 <HAL_GPIO_Init+0x638>)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <HAL_GPIO_Init+0x658>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x59a>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <HAL_GPIO_Init+0x658>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_GPIO_Init+0x658>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x5c4>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e70:	4a24      	ldr	r2, [pc, #144]	; (8000f04 <HAL_GPIO_Init+0x658>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_GPIO_Init+0x658>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x5ee>
        {
          temp |= iocurrent;
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e9a:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <HAL_GPIO_Init+0x658>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_GPIO_Init+0x658>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x618>
        {
          temp |= iocurrent;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_GPIO_Init+0x658>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	f67f ad94 	bls.w	8000a00 <HAL_GPIO_Init+0x154>
      }
    }
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d004      	beq.n	8000f28 <HAL_GPIO_WritePin+0x20>
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	041b      	lsls	r3, r3, #16
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <HAL_GPIO_WritePin+0x2a>
 8000f28:	f240 119f 	movw	r1, #415	; 0x19f
 8000f2c:	480e      	ldr	r0, [pc, #56]	; (8000f68 <HAL_GPIO_WritePin+0x60>)
 8000f2e:	f001 fcc2 	bl	80028b6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000f32:	787b      	ldrb	r3, [r7, #1]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <HAL_GPIO_WritePin+0x40>
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d004      	beq.n	8000f48 <HAL_GPIO_WritePin+0x40>
 8000f3e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <HAL_GPIO_WritePin+0x60>)
 8000f44:	f001 fcb7 	bl	80028b6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8000f48:	787b      	ldrb	r3, [r7, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	08002b44 	.word	0x08002b44

08000f6c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <HAL_GPIO_TogglePin+0x1c>
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	0c1b      	lsrs	r3, r3, #16
 8000f82:	041b      	lsls	r3, r3, #16
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <HAL_GPIO_TogglePin+0x26>
 8000f88:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <HAL_GPIO_TogglePin+0x4c>)
 8000f8e:	f001 fc92 	bl	80028b6 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	401a      	ands	r2, r3
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d104      	bne.n	8000faa <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	041a      	lsls	r2, r3, #16
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	08002b44 	.word	0x08002b44

08000fbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fb42 	bl	8002664 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e18c      	b.n	800131a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_RCC_ClockConfig+0x24>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d904      	bls.n	800101a <HAL_RCC_ClockConfig+0x2e>
 8001010:	f240 2151 	movw	r1, #593	; 0x251
 8001014:	4887      	ldr	r0, [pc, #540]	; (8001234 <HAL_RCC_ClockConfig+0x248>)
 8001016:	f001 fc4e 	bl	80028b6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d031      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d02e      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d02b      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d028      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d025      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b05      	cmp	r3, #5
 800103c:	d022      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2b06      	cmp	r3, #6
 8001042:	d01f      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b07      	cmp	r3, #7
 8001048:	d01c      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2b08      	cmp	r3, #8
 800104e:	d019      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b09      	cmp	r3, #9
 8001054:	d016      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b0a      	cmp	r3, #10
 800105a:	d013      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b0b      	cmp	r3, #11
 8001060:	d010      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	d00d      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2b0d      	cmp	r3, #13
 800106c:	d00a      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2b0e      	cmp	r3, #14
 8001072:	d007      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2b0f      	cmp	r3, #15
 8001078:	d004      	beq.n	8001084 <HAL_RCC_ClockConfig+0x98>
 800107a:	f240 2152 	movw	r1, #594	; 0x252
 800107e:	486d      	ldr	r0, [pc, #436]	; (8001234 <HAL_RCC_ClockConfig+0x248>)
 8001080:	f001 fc19 	bl	80028b6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001084:	4b6c      	ldr	r3, [pc, #432]	; (8001238 <HAL_RCC_ClockConfig+0x24c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d90c      	bls.n	80010ac <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001092:	4b69      	ldr	r3, [pc, #420]	; (8001238 <HAL_RCC_ClockConfig+0x24c>)
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800109a:	4b67      	ldr	r3, [pc, #412]	; (8001238 <HAL_RCC_ClockConfig+0x24c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e136      	b.n	800131a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d049      	beq.n	800114c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c4:	4b5d      	ldr	r3, [pc, #372]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4a5c      	ldr	r2, [pc, #368]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 80010ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010dc:	4b57      	ldr	r3, [pc, #348]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a56      	ldr	r2, [pc, #344]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 80010e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d024      	beq.n	800113a <HAL_RCC_ClockConfig+0x14e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2b80      	cmp	r3, #128	; 0x80
 80010f6:	d020      	beq.n	800113a <HAL_RCC_ClockConfig+0x14e>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b90      	cmp	r3, #144	; 0x90
 80010fe:	d01c      	beq.n	800113a <HAL_RCC_ClockConfig+0x14e>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2ba0      	cmp	r3, #160	; 0xa0
 8001106:	d018      	beq.n	800113a <HAL_RCC_ClockConfig+0x14e>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2bb0      	cmp	r3, #176	; 0xb0
 800110e:	d014      	beq.n	800113a <HAL_RCC_ClockConfig+0x14e>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2bc0      	cmp	r3, #192	; 0xc0
 8001116:	d010      	beq.n	800113a <HAL_RCC_ClockConfig+0x14e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2bd0      	cmp	r3, #208	; 0xd0
 800111e:	d00c      	beq.n	800113a <HAL_RCC_ClockConfig+0x14e>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2be0      	cmp	r3, #224	; 0xe0
 8001126:	d008      	beq.n	800113a <HAL_RCC_ClockConfig+0x14e>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2bf0      	cmp	r3, #240	; 0xf0
 800112e:	d004      	beq.n	800113a <HAL_RCC_ClockConfig+0x14e>
 8001130:	f240 2175 	movw	r1, #629	; 0x275
 8001134:	483f      	ldr	r0, [pc, #252]	; (8001234 <HAL_RCC_ClockConfig+0x248>)
 8001136:	f001 fbbe 	bl	80028b6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113a:	4b40      	ldr	r3, [pc, #256]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	493d      	ldr	r1, [pc, #244]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d059      	beq.n	800120c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d010      	beq.n	8001182 <HAL_RCC_ClockConfig+0x196>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d00c      	beq.n	8001182 <HAL_RCC_ClockConfig+0x196>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d008      	beq.n	8001182 <HAL_RCC_ClockConfig+0x196>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d004      	beq.n	8001182 <HAL_RCC_ClockConfig+0x196>
 8001178:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800117c:	482d      	ldr	r0, [pc, #180]	; (8001234 <HAL_RCC_ClockConfig+0x248>)
 800117e:	f001 fb9a 	bl	80028b6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d119      	bne.n	80011ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0bf      	b.n	800131a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d003      	beq.n	80011aa <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d107      	bne.n	80011ba <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e0af      	b.n	800131a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0a7      	b.n	800131a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f023 0203 	bic.w	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4919      	ldr	r1, [pc, #100]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011dc:	f7ff f9f8 	bl	80005d0 <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e2:	e00a      	b.n	80011fa <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e4:	f7ff f9f4 	bl	80005d0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e08f      	b.n	800131a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_RCC_ClockConfig+0x250>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 020c 	and.w	r2, r3, #12
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	429a      	cmp	r2, r3
 800120a:	d1eb      	bne.n	80011e4 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_RCC_ClockConfig+0x24c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 030f 	and.w	r3, r3, #15
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d212      	bcs.n	8001240 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <HAL_RCC_ClockConfig+0x24c>)
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_RCC_ClockConfig+0x24c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d007      	beq.n	8001240 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e072      	b.n	800131a <HAL_RCC_ClockConfig+0x32e>
 8001234:	08002b80 	.word	0x08002b80
 8001238:	40023c00 	.word	0x40023c00
 800123c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d025      	beq.n	8001298 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d018      	beq.n	8001286 <HAL_RCC_ClockConfig+0x29a>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800125c:	d013      	beq.n	8001286 <HAL_RCC_ClockConfig+0x29a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001266:	d00e      	beq.n	8001286 <HAL_RCC_ClockConfig+0x29a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001270:	d009      	beq.n	8001286 <HAL_RCC_ClockConfig+0x29a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800127a:	d004      	beq.n	8001286 <HAL_RCC_ClockConfig+0x29a>
 800127c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001280:	4828      	ldr	r0, [pc, #160]	; (8001324 <HAL_RCC_ClockConfig+0x338>)
 8001282:	f001 fb18 	bl	80028b6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <HAL_RCC_ClockConfig+0x33c>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4925      	ldr	r1, [pc, #148]	; (8001328 <HAL_RCC_ClockConfig+0x33c>)
 8001294:	4313      	orrs	r3, r2
 8001296:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d026      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d018      	beq.n	80012de <HAL_RCC_ClockConfig+0x2f2>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b4:	d013      	beq.n	80012de <HAL_RCC_ClockConfig+0x2f2>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80012be:	d00e      	beq.n	80012de <HAL_RCC_ClockConfig+0x2f2>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80012c8:	d009      	beq.n	80012de <HAL_RCC_ClockConfig+0x2f2>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80012d2:	d004      	beq.n	80012de <HAL_RCC_ClockConfig+0x2f2>
 80012d4:	f240 21c1 	movw	r1, #705	; 0x2c1
 80012d8:	4812      	ldr	r0, [pc, #72]	; (8001324 <HAL_RCC_ClockConfig+0x338>)
 80012da:	f001 faec 	bl	80028b6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_RCC_ClockConfig+0x33c>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	490e      	ldr	r1, [pc, #56]	; (8001328 <HAL_RCC_ClockConfig+0x33c>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012f2:	f000 f855 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 80012f6:	4601      	mov	r1, r0
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_RCC_ClockConfig+0x33c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_RCC_ClockConfig+0x340>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	fa21 f303 	lsr.w	r3, r1, r3
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <HAL_RCC_ClockConfig+0x344>)
 800130c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_RCC_ClockConfig+0x348>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f918 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	08002b80 	.word	0x08002b80
 8001328:	40023800 	.word	0x40023800
 800132c:	08002c30 	.word	0x08002c30
 8001330:	20000008 	.word	0x20000008
 8001334:	20000000 	.word	0x20000000

08001338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_RCC_GetHCLKFreq+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008

08001350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001354:	f7ff fff0 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001358:	4601      	mov	r1, r0
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	0a9b      	lsrs	r3, r3, #10
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	4a03      	ldr	r2, [pc, #12]	; (8001374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	08002c40 	.word	0x08002c40

08001378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800137c:	f7ff ffdc 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001380:	4601      	mov	r1, r0
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0b5b      	lsrs	r3, r3, #13
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <HAL_RCC_GetPCLK2Freq+0x24>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	08002c40 	.word	0x08002c40

080013a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ba:	4bc6      	ldr	r3, [pc, #792]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	f200 817e 	bhi.w	80016c4 <HAL_RCC_GetSysClockFreq+0x324>
 80013c8:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <HAL_RCC_GetSysClockFreq+0x30>)
 80013ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ce:	bf00      	nop
 80013d0:	08001405 	.word	0x08001405
 80013d4:	080016c5 	.word	0x080016c5
 80013d8:	080016c5 	.word	0x080016c5
 80013dc:	080016c5 	.word	0x080016c5
 80013e0:	0800140b 	.word	0x0800140b
 80013e4:	080016c5 	.word	0x080016c5
 80013e8:	080016c5 	.word	0x080016c5
 80013ec:	080016c5 	.word	0x080016c5
 80013f0:	08001411 	.word	0x08001411
 80013f4:	080016c5 	.word	0x080016c5
 80013f8:	080016c5 	.word	0x080016c5
 80013fc:	080016c5 	.word	0x080016c5
 8001400:	0800156d 	.word	0x0800156d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001404:	4bb4      	ldr	r3, [pc, #720]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001406:	613b      	str	r3, [r7, #16]
       break;
 8001408:	e15f      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800140a:	4bb4      	ldr	r3, [pc, #720]	; (80016dc <HAL_RCC_GetSysClockFreq+0x33c>)
 800140c:	613b      	str	r3, [r7, #16]
      break;
 800140e:	e15c      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001410:	4bb0      	ldr	r3, [pc, #704]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001418:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800141a:	4bae      	ldr	r3, [pc, #696]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d04a      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001426:	4bab      	ldr	r3, [pc, #684]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	099b      	lsrs	r3, r3, #6
 800142c:	f04f 0400 	mov.w	r4, #0
 8001430:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	ea03 0501 	and.w	r5, r3, r1
 800143c:	ea04 0602 	and.w	r6, r4, r2
 8001440:	4629      	mov	r1, r5
 8001442:	4632      	mov	r2, r6
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	f04f 0400 	mov.w	r4, #0
 800144c:	0154      	lsls	r4, r2, #5
 800144e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001452:	014b      	lsls	r3, r1, #5
 8001454:	4619      	mov	r1, r3
 8001456:	4622      	mov	r2, r4
 8001458:	1b49      	subs	r1, r1, r5
 800145a:	eb62 0206 	sbc.w	r2, r2, r6
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	f04f 0400 	mov.w	r4, #0
 8001466:	0194      	lsls	r4, r2, #6
 8001468:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800146c:	018b      	lsls	r3, r1, #6
 800146e:	1a5b      	subs	r3, r3, r1
 8001470:	eb64 0402 	sbc.w	r4, r4, r2
 8001474:	f04f 0100 	mov.w	r1, #0
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	00e2      	lsls	r2, r4, #3
 800147e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001482:	00d9      	lsls	r1, r3, #3
 8001484:	460b      	mov	r3, r1
 8001486:	4614      	mov	r4, r2
 8001488:	195b      	adds	r3, r3, r5
 800148a:	eb44 0406 	adc.w	r4, r4, r6
 800148e:	f04f 0100 	mov.w	r1, #0
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	0262      	lsls	r2, r4, #9
 8001498:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800149c:	0259      	lsls	r1, r3, #9
 800149e:	460b      	mov	r3, r1
 80014a0:	4614      	mov	r4, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	4621      	mov	r1, r4
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f04f 0400 	mov.w	r4, #0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4623      	mov	r3, r4
 80014b0:	f7fe fea8 	bl	8000204 <__aeabi_uldivmod>
 80014b4:	4603      	mov	r3, r0
 80014b6:	460c      	mov	r4, r1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e049      	b.n	8001550 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	f04f 0400 	mov.w	r4, #0
 80014c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	ea03 0501 	and.w	r5, r3, r1
 80014d2:	ea04 0602 	and.w	r6, r4, r2
 80014d6:	4629      	mov	r1, r5
 80014d8:	4632      	mov	r2, r6
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	f04f 0400 	mov.w	r4, #0
 80014e2:	0154      	lsls	r4, r2, #5
 80014e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014e8:	014b      	lsls	r3, r1, #5
 80014ea:	4619      	mov	r1, r3
 80014ec:	4622      	mov	r2, r4
 80014ee:	1b49      	subs	r1, r1, r5
 80014f0:	eb62 0206 	sbc.w	r2, r2, r6
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	f04f 0400 	mov.w	r4, #0
 80014fc:	0194      	lsls	r4, r2, #6
 80014fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001502:	018b      	lsls	r3, r1, #6
 8001504:	1a5b      	subs	r3, r3, r1
 8001506:	eb64 0402 	sbc.w	r4, r4, r2
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	00e2      	lsls	r2, r4, #3
 8001514:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001518:	00d9      	lsls	r1, r3, #3
 800151a:	460b      	mov	r3, r1
 800151c:	4614      	mov	r4, r2
 800151e:	195b      	adds	r3, r3, r5
 8001520:	eb44 0406 	adc.w	r4, r4, r6
 8001524:	f04f 0100 	mov.w	r1, #0
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	02a2      	lsls	r2, r4, #10
 800152e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001532:	0299      	lsls	r1, r3, #10
 8001534:	460b      	mov	r3, r1
 8001536:	4614      	mov	r4, r2
 8001538:	4618      	mov	r0, r3
 800153a:	4621      	mov	r1, r4
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f04f 0400 	mov.w	r4, #0
 8001542:	461a      	mov	r2, r3
 8001544:	4623      	mov	r3, r4
 8001546:	f7fe fe5d 	bl	8000204 <__aeabi_uldivmod>
 800154a:	4603      	mov	r3, r0
 800154c:	460c      	mov	r4, r1
 800154e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001550:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	3301      	adds	r3, #1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	613b      	str	r3, [r7, #16]
      break;
 800156a:	e0ae      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800156c:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001574:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001576:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d04a      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	099b      	lsrs	r3, r3, #6
 8001588:	f04f 0400 	mov.w	r4, #0
 800158c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	ea03 0501 	and.w	r5, r3, r1
 8001598:	ea04 0602 	and.w	r6, r4, r2
 800159c:	4629      	mov	r1, r5
 800159e:	4632      	mov	r2, r6
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	f04f 0400 	mov.w	r4, #0
 80015a8:	0154      	lsls	r4, r2, #5
 80015aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015ae:	014b      	lsls	r3, r1, #5
 80015b0:	4619      	mov	r1, r3
 80015b2:	4622      	mov	r2, r4
 80015b4:	1b49      	subs	r1, r1, r5
 80015b6:	eb62 0206 	sbc.w	r2, r2, r6
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	f04f 0400 	mov.w	r4, #0
 80015c2:	0194      	lsls	r4, r2, #6
 80015c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015c8:	018b      	lsls	r3, r1, #6
 80015ca:	1a5b      	subs	r3, r3, r1
 80015cc:	eb64 0402 	sbc.w	r4, r4, r2
 80015d0:	f04f 0100 	mov.w	r1, #0
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	00e2      	lsls	r2, r4, #3
 80015da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015de:	00d9      	lsls	r1, r3, #3
 80015e0:	460b      	mov	r3, r1
 80015e2:	4614      	mov	r4, r2
 80015e4:	195b      	adds	r3, r3, r5
 80015e6:	eb44 0406 	adc.w	r4, r4, r6
 80015ea:	f04f 0100 	mov.w	r1, #0
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	0262      	lsls	r2, r4, #9
 80015f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80015f8:	0259      	lsls	r1, r3, #9
 80015fa:	460b      	mov	r3, r1
 80015fc:	4614      	mov	r4, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	4621      	mov	r1, r4
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f04f 0400 	mov.w	r4, #0
 8001608:	461a      	mov	r2, r3
 800160a:	4623      	mov	r3, r4
 800160c:	f7fe fdfa 	bl	8000204 <__aeabi_uldivmod>
 8001610:	4603      	mov	r3, r0
 8001612:	460c      	mov	r4, r1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e049      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001618:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	f04f 0400 	mov.w	r4, #0
 8001622:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	ea03 0501 	and.w	r5, r3, r1
 800162e:	ea04 0602 	and.w	r6, r4, r2
 8001632:	4629      	mov	r1, r5
 8001634:	4632      	mov	r2, r6
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	f04f 0400 	mov.w	r4, #0
 800163e:	0154      	lsls	r4, r2, #5
 8001640:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001644:	014b      	lsls	r3, r1, #5
 8001646:	4619      	mov	r1, r3
 8001648:	4622      	mov	r2, r4
 800164a:	1b49      	subs	r1, r1, r5
 800164c:	eb62 0206 	sbc.w	r2, r2, r6
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	0194      	lsls	r4, r2, #6
 800165a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800165e:	018b      	lsls	r3, r1, #6
 8001660:	1a5b      	subs	r3, r3, r1
 8001662:	eb64 0402 	sbc.w	r4, r4, r2
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	00e2      	lsls	r2, r4, #3
 8001670:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001674:	00d9      	lsls	r1, r3, #3
 8001676:	460b      	mov	r3, r1
 8001678:	4614      	mov	r4, r2
 800167a:	195b      	adds	r3, r3, r5
 800167c:	eb44 0406 	adc.w	r4, r4, r6
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	02a2      	lsls	r2, r4, #10
 800168a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800168e:	0299      	lsls	r1, r3, #10
 8001690:	460b      	mov	r3, r1
 8001692:	4614      	mov	r4, r2
 8001694:	4618      	mov	r0, r3
 8001696:	4621      	mov	r1, r4
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f04f 0400 	mov.w	r4, #0
 800169e:	461a      	mov	r2, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	f7fe fdaf 	bl	8000204 <__aeabi_uldivmod>
 80016a6:	4603      	mov	r3, r0
 80016a8:	460c      	mov	r4, r1
 80016aa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x334>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	0f1b      	lsrs	r3, r3, #28
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	613b      	str	r3, [r7, #16]
      break;
 80016c2:	e002      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x338>)
 80016c6:	613b      	str	r3, [r7, #16]
      break;
 80016c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ca:	693b      	ldr	r3, [r7, #16]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	00f42400 	.word	0x00f42400
 80016dc:	007a1200 	.word	0x007a1200

080016e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d904      	bls.n	80016fe <HAL_RCC_OscConfig+0x1e>
 80016f4:	f640 510c 	movw	r1, #3340	; 0xd0c
 80016f8:	48a5      	ldr	r0, [pc, #660]	; (8001990 <HAL_RCC_OscConfig+0x2b0>)
 80016fa:	f001 f8dc 	bl	80028b6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8096 	beq.w	8001838 <HAL_RCC_OscConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00e      	beq.n	8001732 <HAL_RCC_OscConfig+0x52>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d009      	beq.n	8001732 <HAL_RCC_OscConfig+0x52>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001726:	d004      	beq.n	8001732 <HAL_RCC_OscConfig+0x52>
 8001728:	f640 5111 	movw	r1, #3345	; 0xd11
 800172c:	4898      	ldr	r0, [pc, #608]	; (8001990 <HAL_RCC_OscConfig+0x2b0>)
 800172e:	f001 f8c2 	bl	80028b6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001732:	4b98      	ldr	r3, [pc, #608]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b04      	cmp	r3, #4
 800173c:	d019      	beq.n	8001772 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800173e:	4b95      	ldr	r3, [pc, #596]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001746:	2b08      	cmp	r3, #8
 8001748:	d106      	bne.n	8001758 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800174a:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001756:	d00c      	beq.n	8001772 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001758:	4b8e      	ldr	r3, [pc, #568]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001760:	2b0c      	cmp	r3, #12
 8001762:	d112      	bne.n	800178a <HAL_RCC_OscConfig+0xaa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001764:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001770:	d10b      	bne.n	800178a <HAL_RCC_OscConfig+0xaa>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001772:	4b88      	ldr	r3, [pc, #544]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d05b      	beq.n	8001836 <HAL_RCC_OscConfig+0x156>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d157      	bne.n	8001836 <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e2bf      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0xc2>
 8001794:	4b7f      	ldr	r3, [pc, #508]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a7e      	ldr	r2, [pc, #504]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 800179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e01d      	b.n	80017de <HAL_RCC_OscConfig+0xfe>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0xe6>
 80017ac:	4b79      	ldr	r3, [pc, #484]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a78      	ldr	r2, [pc, #480]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80017b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b76      	ldr	r3, [pc, #472]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a75      	ldr	r2, [pc, #468]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0xfe>
 80017c6:	4b73      	ldr	r3, [pc, #460]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a72      	ldr	r2, [pc, #456]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80017cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b70      	ldr	r3, [pc, #448]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6f      	ldr	r2, [pc, #444]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80017d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d013      	beq.n	800180e <HAL_RCC_OscConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7fe fef3 	bl	80005d0 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x120>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ee:	f7fe feef 	bl	80005d0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b64      	cmp	r3, #100	; 0x64
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e284      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001800:	4b64      	ldr	r3, [pc, #400]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x10e>
 800180c:	e014      	b.n	8001838 <HAL_RCC_OscConfig+0x158>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7fe fedf 	bl	80005d0 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001816:	f7fe fedb 	bl	80005d0 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b64      	cmp	r3, #100	; 0x64
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e270      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001828:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0x136>
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x158>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8086 	beq.w	8001952 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_RCC_OscConfig+0x180>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d004      	beq.n	8001860 <HAL_RCC_OscConfig+0x180>
 8001856:	f640 5149 	movw	r1, #3401	; 0xd49
 800185a:	484d      	ldr	r0, [pc, #308]	; (8001990 <HAL_RCC_OscConfig+0x2b0>)
 800185c:	f001 f82b 	bl	80028b6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b1f      	cmp	r3, #31
 8001866:	d904      	bls.n	8001872 <HAL_RCC_OscConfig+0x192>
 8001868:	f640 514a 	movw	r1, #3402	; 0xd4a
 800186c:	4848      	ldr	r0, [pc, #288]	; (8001990 <HAL_RCC_OscConfig+0x2b0>)
 800186e:	f001 f822 	bl	80028b6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001872:	4b48      	ldr	r3, [pc, #288]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b00      	cmp	r3, #0
 800187c:	d017      	beq.n	80018ae <HAL_RCC_OscConfig+0x1ce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800187e:	4b45      	ldr	r3, [pc, #276]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001886:	2b08      	cmp	r3, #8
 8001888:	d105      	bne.n	8001896 <HAL_RCC_OscConfig+0x1b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_RCC_OscConfig+0x1ce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d11c      	bne.n	80018dc <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a2:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d116      	bne.n	80018dc <HAL_RCC_OscConfig+0x1fc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1e6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1e6>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e221      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	492f      	ldr	r1, [pc, #188]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	e03a      	b.n	8001952 <HAL_RCC_OscConfig+0x272>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_RCC_OscConfig+0x2b8>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7fe fe71 	bl	80005d0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x224>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f2:	f7fe fe6d 	bl	80005d0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e202      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	491d      	ldr	r1, [pc, #116]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
 8001924:	e015      	b.n	8001952 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_RCC_OscConfig+0x2b8>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7fe fe50 	bl	80005d0 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001934:	f7fe fe4c 	bl	80005d0 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1e1      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_RCC_OscConfig+0x2b4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d046      	beq.n	80019ec <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_RCC_OscConfig+0x298>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d004      	beq.n	8001978 <HAL_RCC_OscConfig+0x298>
 800196e:	f44f 6159 	mov.w	r1, #3472	; 0xd90
 8001972:	4807      	ldr	r0, [pc, #28]	; (8001990 <HAL_RCC_OscConfig+0x2b0>)
 8001974:	f000 ff9f 	bl	80028b6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01f      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_OscConfig+0x2bc>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7fe fe23 	bl	80005d0 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198c:	e011      	b.n	80019b2 <HAL_RCC_OscConfig+0x2d2>
 800198e:	bf00      	nop
 8001990:	08002bb8 	.word	0x08002bb8
 8001994:	40023800 	.word	0x40023800
 8001998:	42470000 	.word	0x42470000
 800199c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a0:	f7fe fe16 	bl	80005d0 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1ab      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	4ba4      	ldr	r3, [pc, #656]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 80019b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x2c0>
 80019be:	e015      	b.n	80019ec <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c0:	4ba1      	ldr	r3, [pc, #644]	; (8001c48 <HAL_RCC_OscConfig+0x568>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7fe fe03 	bl	80005d0 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ce:	f7fe fdff 	bl	80005d0 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e194      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b98      	ldr	r3, [pc, #608]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 80019e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a8 	beq.w	8001b4a <HAL_RCC_OscConfig+0x46a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00c      	beq.n	8001a20 <HAL_RCC_OscConfig+0x340>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d008      	beq.n	8001a20 <HAL_RCC_OscConfig+0x340>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d004      	beq.n	8001a20 <HAL_RCC_OscConfig+0x340>
 8001a16:	f640 51bc 	movw	r1, #3516	; 0xdbc
 8001a1a:	488c      	ldr	r0, [pc, #560]	; (8001c4c <HAL_RCC_OscConfig+0x56c>)
 8001a1c:	f000 ff4b 	bl	80028b6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a20:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10f      	bne.n	8001a4c <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	4b84      	ldr	r3, [pc, #528]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a83      	ldr	r2, [pc, #524]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <HAL_RCC_OscConfig+0x570>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d118      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a58:	4b7d      	ldr	r3, [pc, #500]	; (8001c50 <HAL_RCC_OscConfig+0x570>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a7c      	ldr	r2, [pc, #496]	; (8001c50 <HAL_RCC_OscConfig+0x570>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a64:	f7fe fdb4 	bl	80005d0 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6c:	f7fe fdb0 	bl	80005d0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e145      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7e:	4b74      	ldr	r3, [pc, #464]	; (8001c50 <HAL_RCC_OscConfig+0x570>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d106      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x3c0>
 8001a92:	4b6c      	ldr	r3, [pc, #432]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	4a6b      	ldr	r2, [pc, #428]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9e:	e01c      	b.n	8001ada <HAL_RCC_OscConfig+0x3fa>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3e2>
 8001aa8:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	4a65      	ldr	r2, [pc, #404]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab4:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	4a62      	ldr	r2, [pc, #392]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac0:	e00b      	b.n	8001ada <HAL_RCC_OscConfig+0x3fa>
 8001ac2:	4b60      	ldr	r3, [pc, #384]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	4a5f      	ldr	r2, [pc, #380]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ace:	4b5d      	ldr	r3, [pc, #372]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad2:	4a5c      	ldr	r2, [pc, #368]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d015      	beq.n	8001b0e <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7fe fd75 	bl	80005d0 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7fe fd71 	bl	80005d0 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e104      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ee      	beq.n	8001aea <HAL_RCC_OscConfig+0x40a>
 8001b0c:	e014      	b.n	8001b38 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7fe fd5f 	bl	80005d0 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x44c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7fe fd5b 	bl	80005d0 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x44c>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0ee      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ee      	bne.n	8001b16 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d105      	bne.n	8001b4a <HAL_RCC_OscConfig+0x46a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3e:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a40      	ldr	r2, [pc, #256]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x48c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d008      	beq.n	8001b6c <HAL_RCC_OscConfig+0x48c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d004      	beq.n	8001b6c <HAL_RCC_OscConfig+0x48c>
 8001b62:	f640 51ff 	movw	r1, #3583	; 0xdff
 8001b66:	4839      	ldr	r0, [pc, #228]	; (8001c4c <HAL_RCC_OscConfig+0x56c>)
 8001b68:	f000 fea5 	bl	80028b6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80c9 	beq.w	8001d08 <HAL_RCC_OscConfig+0x628>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <HAL_RCC_OscConfig+0x564>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	f000 80c0 	beq.w	8001d04 <HAL_RCC_OscConfig+0x624>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	f040 80a4 	bne.w	8001cd6 <HAL_RCC_OscConfig+0x5f6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_RCC_OscConfig+0x4ca>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b9e:	d004      	beq.n	8001baa <HAL_RCC_OscConfig+0x4ca>
 8001ba0:	f640 6108 	movw	r1, #3592	; 0xe08
 8001ba4:	4829      	ldr	r0, [pc, #164]	; (8001c4c <HAL_RCC_OscConfig+0x56c>)
 8001ba6:	f000 fe86 	bl	80028b6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	2b3f      	cmp	r3, #63	; 0x3f
 8001bb0:	d904      	bls.n	8001bbc <HAL_RCC_OscConfig+0x4dc>
 8001bb2:	f640 6109 	movw	r1, #3593	; 0xe09
 8001bb6:	4825      	ldr	r0, [pc, #148]	; (8001c4c <HAL_RCC_OscConfig+0x56c>)
 8001bb8:	f000 fe7d 	bl	80028b6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	2b31      	cmp	r3, #49	; 0x31
 8001bc2:	d904      	bls.n	8001bce <HAL_RCC_OscConfig+0x4ee>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001bcc:	d904      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x4f8>
 8001bce:	f640 610a 	movw	r1, #3594	; 0xe0a
 8001bd2:	481e      	ldr	r0, [pc, #120]	; (8001c4c <HAL_RCC_OscConfig+0x56c>)
 8001bd4:	f000 fe6f 	bl	80028b6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d010      	beq.n	8001c02 <HAL_RCC_OscConfig+0x522>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x522>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	2b06      	cmp	r3, #6
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_OscConfig+0x522>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d004      	beq.n	8001c02 <HAL_RCC_OscConfig+0x522>
 8001bf8:	f640 610b 	movw	r1, #3595	; 0xe0b
 8001bfc:	4813      	ldr	r0, [pc, #76]	; (8001c4c <HAL_RCC_OscConfig+0x56c>)
 8001bfe:	f000 fe5a 	bl	80028b6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d903      	bls.n	8001c12 <HAL_RCC_OscConfig+0x532>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	2b0f      	cmp	r3, #15
 8001c10:	d904      	bls.n	8001c1c <HAL_RCC_OscConfig+0x53c>
 8001c12:	f640 610c 	movw	r1, #3596	; 0xe0c
 8001c16:	480d      	ldr	r0, [pc, #52]	; (8001c4c <HAL_RCC_OscConfig+0x56c>)
 8001c18:	f000 fe4d 	bl	80028b6 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d903      	bls.n	8001c2c <HAL_RCC_OscConfig+0x54c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	d904      	bls.n	8001c36 <HAL_RCC_OscConfig+0x556>
 8001c2c:	f640 610d 	movw	r1, #3597	; 0xe0d
 8001c30:	4806      	ldr	r0, [pc, #24]	; (8001c4c <HAL_RCC_OscConfig+0x56c>)
 8001c32:	f000 fe40 	bl	80028b6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_RCC_OscConfig+0x574>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7fe fcc8 	bl	80005d0 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	e012      	b.n	8001c6a <HAL_RCC_OscConfig+0x58a>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	42470e80 	.word	0x42470e80
 8001c4c:	08002bb8 	.word	0x08002bb8
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe fcba 	bl	80005d0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e04f      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_RCC_OscConfig+0x634>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x578>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	071b      	lsls	r3, r3, #28
 8001ca2:	491c      	ldr	r1, [pc, #112]	; (8001d14 <HAL_RCC_OscConfig+0x634>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x638>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7fe fc8f 	bl	80005d0 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x5e8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe fc8b 	bl	80005d0 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x5e8>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e020      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_RCC_OscConfig+0x634>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x5d6>
 8001cd4:	e018      	b.n	8001d08 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_RCC_OscConfig+0x638>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fc78 	bl	80005d0 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe fc74 	bl	80005d0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_RCC_OscConfig+0x634>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x604>
 8001d02:	e001      	b.n	8001d08 <HAL_RCC_OscConfig+0x628>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x62a>
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	42470060 	.word	0x42470060

08001d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0be      	b.n	8001eac <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d03b      	beq.n	8001dae <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5e      	ldr	r2, [pc, #376]	; (8001eb4 <HAL_UART_Init+0x198>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d01d      	beq.n	8001d7c <HAL_UART_Init+0x60>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <HAL_UART_Init+0x19c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d018      	beq.n	8001d7c <HAL_UART_Init+0x60>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5b      	ldr	r2, [pc, #364]	; (8001ebc <HAL_UART_Init+0x1a0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d013      	beq.n	8001d7c <HAL_UART_Init+0x60>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a59      	ldr	r2, [pc, #356]	; (8001ec0 <HAL_UART_Init+0x1a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00e      	beq.n	8001d7c <HAL_UART_Init+0x60>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_UART_Init+0x1a8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d009      	beq.n	8001d7c <HAL_UART_Init+0x60>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a56      	ldr	r2, [pc, #344]	; (8001ec8 <HAL_UART_Init+0x1ac>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d004      	beq.n	8001d7c <HAL_UART_Init+0x60>
 8001d72:	f240 114b 	movw	r1, #331	; 0x14b
 8001d76:	4855      	ldr	r0, [pc, #340]	; (8001ecc <HAL_UART_Init+0x1b0>)
 8001d78:	f000 fd9d 	bl	80028b6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d037      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d8c:	d032      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d96:	d02d      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001da0:	d028      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001da2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8001da6:	4849      	ldr	r0, [pc, #292]	; (8001ecc <HAL_UART_Init+0x1b0>)
 8001da8:	f000 fd85 	bl	80028b6 <assert_failed>
 8001dac:	e022      	b.n	8001df4 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a40      	ldr	r2, [pc, #256]	; (8001eb4 <HAL_UART_Init+0x198>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01d      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a3e      	ldr	r2, [pc, #248]	; (8001eb8 <HAL_UART_Init+0x19c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a3d      	ldr	r2, [pc, #244]	; (8001ebc <HAL_UART_Init+0x1a0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a3b      	ldr	r2, [pc, #236]	; (8001ec0 <HAL_UART_Init+0x1a4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a3a      	ldr	r2, [pc, #232]	; (8001ec4 <HAL_UART_Init+0x1a8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a38      	ldr	r2, [pc, #224]	; (8001ec8 <HAL_UART_Init+0x1ac>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_UART_Init+0xd8>
 8001dea:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001dee:	4837      	ldr	r0, [pc, #220]	; (8001ecc <HAL_UART_Init+0x1b0>)
 8001df0:	f000 fd61 	bl	80028b6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_UART_Init+0xf4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e04:	d004      	beq.n	8001e10 <HAL_UART_Init+0xf4>
 8001e06:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8001e0a:	4830      	ldr	r0, [pc, #192]	; (8001ecc <HAL_UART_Init+0x1b0>)
 8001e0c:	f000 fd53 	bl	80028b6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_UART_Init+0x110>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e20:	d004      	beq.n	8001e2c <HAL_UART_Init+0x110>
 8001e22:	f240 1153 	movw	r1, #339	; 0x153
 8001e26:	4829      	ldr	r0, [pc, #164]	; (8001ecc <HAL_UART_Init+0x1b0>)
 8001e28:	f000 fd45 	bl	80028b6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fd6b 	bl	800291c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2224      	movs	r2, #36	; 0x24
 8001e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f836 	bl	8001ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	40004400 	.word	0x40004400
 8001ebc:	40004800 	.word	0x40004800
 8001ec0:	40004c00 	.word	0x40004c00
 8001ec4:	40005000 	.word	0x40005000
 8001ec8:	40011400 	.word	0x40011400
 8001ecc:	08002bf4 	.word	0x08002bf4

08001ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a9a      	ldr	r2, [pc, #616]	; (8002148 <UART_SetConfig+0x278>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d904      	bls.n	8001eee <UART_SetConfig+0x1e>
 8001ee4:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8001ee8:	4898      	ldr	r0, [pc, #608]	; (800214c <UART_SetConfig+0x27c>)
 8001eea:	f000 fce4 	bl	80028b6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <UART_SetConfig+0x3a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001efe:	d004      	beq.n	8001f0a <UART_SetConfig+0x3a>
 8001f00:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8001f04:	4891      	ldr	r0, [pc, #580]	; (800214c <UART_SetConfig+0x27c>)
 8001f06:	f000 fcd6 	bl	80028b6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00e      	beq.n	8001f30 <UART_SetConfig+0x60>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d009      	beq.n	8001f30 <UART_SetConfig+0x60>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f24:	d004      	beq.n	8001f30 <UART_SetConfig+0x60>
 8001f26:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8001f2a:	4888      	ldr	r0, [pc, #544]	; (800214c <UART_SetConfig+0x27c>)
 8001f2c:	f000 fcc3 	bl	80028b6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <UART_SetConfig+0x76>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d104      	bne.n	8001f50 <UART_SetConfig+0x80>
 8001f46:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8001f4a:	4880      	ldr	r0, [pc, #512]	; (800214c <UART_SetConfig+0x27c>)
 8001f4c:	f000 fcb3 	bl	80028b6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f88:	f023 030c 	bic.w	r3, r3, #12
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	430b      	orrs	r3, r1
 8001f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb4:	f040 818f 	bne.w	80022d6 <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a64      	ldr	r2, [pc, #400]	; (8002150 <UART_SetConfig+0x280>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d005      	beq.n	8001fce <UART_SetConfig+0xfe>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a63      	ldr	r2, [pc, #396]	; (8002154 <UART_SetConfig+0x284>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	f040 80c7 	bne.w	800215c <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fce:	f7ff f9d3 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 8001fd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	f04f 0600 	mov.w	r6, #0
 8001fdc:	46a8      	mov	r8, r5
 8001fde:	46b1      	mov	r9, r6
 8001fe0:	eb18 0308 	adds.w	r3, r8, r8
 8001fe4:	eb49 0409 	adc.w	r4, r9, r9
 8001fe8:	4698      	mov	r8, r3
 8001fea:	46a1      	mov	r9, r4
 8001fec:	eb18 0805 	adds.w	r8, r8, r5
 8001ff0:	eb49 0906 	adc.w	r9, r9, r6
 8001ff4:	f04f 0100 	mov.w	r1, #0
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002000:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002004:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002008:	4688      	mov	r8, r1
 800200a:	4691      	mov	r9, r2
 800200c:	eb18 0005 	adds.w	r0, r8, r5
 8002010:	eb49 0106 	adc.w	r1, r9, r6
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	461d      	mov	r5, r3
 800201a:	f04f 0600 	mov.w	r6, #0
 800201e:	196b      	adds	r3, r5, r5
 8002020:	eb46 0406 	adc.w	r4, r6, r6
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	f7fe f8ec 	bl	8000204 <__aeabi_uldivmod>
 800202c:	4603      	mov	r3, r0
 800202e:	460c      	mov	r4, r1
 8002030:	461a      	mov	r2, r3
 8002032:	4b49      	ldr	r3, [pc, #292]	; (8002158 <UART_SetConfig+0x288>)
 8002034:	fba3 2302 	umull	r2, r3, r3, r2
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	461d      	mov	r5, r3
 8002042:	f04f 0600 	mov.w	r6, #0
 8002046:	46a9      	mov	r9, r5
 8002048:	46b2      	mov	sl, r6
 800204a:	eb19 0309 	adds.w	r3, r9, r9
 800204e:	eb4a 040a 	adc.w	r4, sl, sl
 8002052:	4699      	mov	r9, r3
 8002054:	46a2      	mov	sl, r4
 8002056:	eb19 0905 	adds.w	r9, r9, r5
 800205a:	eb4a 0a06 	adc.w	sl, sl, r6
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800206a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800206e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002072:	4689      	mov	r9, r1
 8002074:	4692      	mov	sl, r2
 8002076:	eb19 0005 	adds.w	r0, r9, r5
 800207a:	eb4a 0106 	adc.w	r1, sl, r6
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	461d      	mov	r5, r3
 8002084:	f04f 0600 	mov.w	r6, #0
 8002088:	196b      	adds	r3, r5, r5
 800208a:	eb46 0406 	adc.w	r4, r6, r6
 800208e:	461a      	mov	r2, r3
 8002090:	4623      	mov	r3, r4
 8002092:	f7fe f8b7 	bl	8000204 <__aeabi_uldivmod>
 8002096:	4603      	mov	r3, r0
 8002098:	460c      	mov	r4, r1
 800209a:	461a      	mov	r2, r3
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <UART_SetConfig+0x288>)
 800209e:	fba3 1302 	umull	r1, r3, r3, r2
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2164      	movs	r1, #100	; 0x64
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	3332      	adds	r3, #50	; 0x32
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <UART_SetConfig+0x288>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020be:	4498      	add	r8, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	461d      	mov	r5, r3
 80020c4:	f04f 0600 	mov.w	r6, #0
 80020c8:	46a9      	mov	r9, r5
 80020ca:	46b2      	mov	sl, r6
 80020cc:	eb19 0309 	adds.w	r3, r9, r9
 80020d0:	eb4a 040a 	adc.w	r4, sl, sl
 80020d4:	4699      	mov	r9, r3
 80020d6:	46a2      	mov	sl, r4
 80020d8:	eb19 0905 	adds.w	r9, r9, r5
 80020dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020f4:	4689      	mov	r9, r1
 80020f6:	4692      	mov	sl, r2
 80020f8:	eb19 0005 	adds.w	r0, r9, r5
 80020fc:	eb4a 0106 	adc.w	r1, sl, r6
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	461d      	mov	r5, r3
 8002106:	f04f 0600 	mov.w	r6, #0
 800210a:	196b      	adds	r3, r5, r5
 800210c:	eb46 0406 	adc.w	r4, r6, r6
 8002110:	461a      	mov	r2, r3
 8002112:	4623      	mov	r3, r4
 8002114:	f7fe f876 	bl	8000204 <__aeabi_uldivmod>
 8002118:	4603      	mov	r3, r0
 800211a:	460c      	mov	r4, r1
 800211c:	461a      	mov	r2, r3
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <UART_SetConfig+0x288>)
 8002120:	fba3 1302 	umull	r1, r3, r3, r2
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	2164      	movs	r1, #100	; 0x64
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	3332      	adds	r3, #50	; 0x32
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <UART_SetConfig+0x288>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	f003 0207 	and.w	r2, r3, #7
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4442      	add	r2, r8
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	e27a      	b.n	800263e <UART_SetConfig+0x76e>
 8002148:	00a037a0 	.word	0x00a037a0
 800214c:	08002bf4 	.word	0x08002bf4
 8002150:	40011000 	.word	0x40011000
 8002154:	40011400 	.word	0x40011400
 8002158:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800215c:	f7ff f8f8 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002160:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	461d      	mov	r5, r3
 8002166:	f04f 0600 	mov.w	r6, #0
 800216a:	46a8      	mov	r8, r5
 800216c:	46b1      	mov	r9, r6
 800216e:	eb18 0308 	adds.w	r3, r8, r8
 8002172:	eb49 0409 	adc.w	r4, r9, r9
 8002176:	4698      	mov	r8, r3
 8002178:	46a1      	mov	r9, r4
 800217a:	eb18 0805 	adds.w	r8, r8, r5
 800217e:	eb49 0906 	adc.w	r9, r9, r6
 8002182:	f04f 0100 	mov.w	r1, #0
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800218e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002192:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002196:	4688      	mov	r8, r1
 8002198:	4691      	mov	r9, r2
 800219a:	eb18 0005 	adds.w	r0, r8, r5
 800219e:	eb49 0106 	adc.w	r1, r9, r6
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	461d      	mov	r5, r3
 80021a8:	f04f 0600 	mov.w	r6, #0
 80021ac:	196b      	adds	r3, r5, r5
 80021ae:	eb46 0406 	adc.w	r4, r6, r6
 80021b2:	461a      	mov	r2, r3
 80021b4:	4623      	mov	r3, r4
 80021b6:	f7fe f825 	bl	8000204 <__aeabi_uldivmod>
 80021ba:	4603      	mov	r3, r0
 80021bc:	460c      	mov	r4, r1
 80021be:	461a      	mov	r2, r3
 80021c0:	4bb3      	ldr	r3, [pc, #716]	; (8002490 <UART_SetConfig+0x5c0>)
 80021c2:	fba3 2302 	umull	r2, r3, r3, r2
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	461d      	mov	r5, r3
 80021d0:	f04f 0600 	mov.w	r6, #0
 80021d4:	46a9      	mov	r9, r5
 80021d6:	46b2      	mov	sl, r6
 80021d8:	eb19 0309 	adds.w	r3, r9, r9
 80021dc:	eb4a 040a 	adc.w	r4, sl, sl
 80021e0:	4699      	mov	r9, r3
 80021e2:	46a2      	mov	sl, r4
 80021e4:	eb19 0905 	adds.w	r9, r9, r5
 80021e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002200:	4689      	mov	r9, r1
 8002202:	4692      	mov	sl, r2
 8002204:	eb19 0005 	adds.w	r0, r9, r5
 8002208:	eb4a 0106 	adc.w	r1, sl, r6
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	461d      	mov	r5, r3
 8002212:	f04f 0600 	mov.w	r6, #0
 8002216:	196b      	adds	r3, r5, r5
 8002218:	eb46 0406 	adc.w	r4, r6, r6
 800221c:	461a      	mov	r2, r3
 800221e:	4623      	mov	r3, r4
 8002220:	f7fd fff0 	bl	8000204 <__aeabi_uldivmod>
 8002224:	4603      	mov	r3, r0
 8002226:	460c      	mov	r4, r1
 8002228:	461a      	mov	r2, r3
 800222a:	4b99      	ldr	r3, [pc, #612]	; (8002490 <UART_SetConfig+0x5c0>)
 800222c:	fba3 1302 	umull	r1, r3, r3, r2
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	2164      	movs	r1, #100	; 0x64
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	3332      	adds	r3, #50	; 0x32
 800223e:	4a94      	ldr	r2, [pc, #592]	; (8002490 <UART_SetConfig+0x5c0>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800224c:	4498      	add	r8, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	461d      	mov	r5, r3
 8002252:	f04f 0600 	mov.w	r6, #0
 8002256:	46a9      	mov	r9, r5
 8002258:	46b2      	mov	sl, r6
 800225a:	eb19 0309 	adds.w	r3, r9, r9
 800225e:	eb4a 040a 	adc.w	r4, sl, sl
 8002262:	4699      	mov	r9, r3
 8002264:	46a2      	mov	sl, r4
 8002266:	eb19 0905 	adds.w	r9, r9, r5
 800226a:	eb4a 0a06 	adc.w	sl, sl, r6
 800226e:	f04f 0100 	mov.w	r1, #0
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800227a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800227e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002282:	4689      	mov	r9, r1
 8002284:	4692      	mov	sl, r2
 8002286:	eb19 0005 	adds.w	r0, r9, r5
 800228a:	eb4a 0106 	adc.w	r1, sl, r6
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	461d      	mov	r5, r3
 8002294:	f04f 0600 	mov.w	r6, #0
 8002298:	196b      	adds	r3, r5, r5
 800229a:	eb46 0406 	adc.w	r4, r6, r6
 800229e:	461a      	mov	r2, r3
 80022a0:	4623      	mov	r3, r4
 80022a2:	f7fd ffaf 	bl	8000204 <__aeabi_uldivmod>
 80022a6:	4603      	mov	r3, r0
 80022a8:	460c      	mov	r4, r1
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b78      	ldr	r3, [pc, #480]	; (8002490 <UART_SetConfig+0x5c0>)
 80022ae:	fba3 1302 	umull	r1, r3, r3, r2
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2164      	movs	r1, #100	; 0x64
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	3332      	adds	r3, #50	; 0x32
 80022c0:	4a73      	ldr	r2, [pc, #460]	; (8002490 <UART_SetConfig+0x5c0>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	f003 0207 	and.w	r2, r3, #7
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4442      	add	r2, r8
 80022d2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80022d4:	e1b3      	b.n	800263e <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <UART_SetConfig+0x5c4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d005      	beq.n	80022ec <UART_SetConfig+0x41c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6c      	ldr	r2, [pc, #432]	; (8002498 <UART_SetConfig+0x5c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	f040 80d8 	bne.w	800249c <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 80022ec:	f7ff f844 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 80022f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	469a      	mov	sl, r3
 80022f6:	f04f 0b00 	mov.w	fp, #0
 80022fa:	46d0      	mov	r8, sl
 80022fc:	46d9      	mov	r9, fp
 80022fe:	eb18 0308 	adds.w	r3, r8, r8
 8002302:	eb49 0409 	adc.w	r4, r9, r9
 8002306:	4698      	mov	r8, r3
 8002308:	46a1      	mov	r9, r4
 800230a:	eb18 080a 	adds.w	r8, r8, sl
 800230e:	eb49 090b 	adc.w	r9, r9, fp
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800231e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002322:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002326:	4688      	mov	r8, r1
 8002328:	4691      	mov	r9, r2
 800232a:	eb1a 0508 	adds.w	r5, sl, r8
 800232e:	eb4b 0609 	adc.w	r6, fp, r9
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4619      	mov	r1, r3
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	f04f 0400 	mov.w	r4, #0
 8002344:	0094      	lsls	r4, r2, #2
 8002346:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800234a:	008b      	lsls	r3, r1, #2
 800234c:	461a      	mov	r2, r3
 800234e:	4623      	mov	r3, r4
 8002350:	4628      	mov	r0, r5
 8002352:	4631      	mov	r1, r6
 8002354:	f7fd ff56 	bl	8000204 <__aeabi_uldivmod>
 8002358:	4603      	mov	r3, r0
 800235a:	460c      	mov	r4, r1
 800235c:	461a      	mov	r2, r3
 800235e:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <UART_SetConfig+0x5c0>)
 8002360:	fba3 2302 	umull	r2, r3, r3, r2
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	469b      	mov	fp, r3
 800236e:	f04f 0c00 	mov.w	ip, #0
 8002372:	46d9      	mov	r9, fp
 8002374:	46e2      	mov	sl, ip
 8002376:	eb19 0309 	adds.w	r3, r9, r9
 800237a:	eb4a 040a 	adc.w	r4, sl, sl
 800237e:	4699      	mov	r9, r3
 8002380:	46a2      	mov	sl, r4
 8002382:	eb19 090b 	adds.w	r9, r9, fp
 8002386:	eb4a 0a0c 	adc.w	sl, sl, ip
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002396:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800239a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800239e:	4689      	mov	r9, r1
 80023a0:	4692      	mov	sl, r2
 80023a2:	eb1b 0509 	adds.w	r5, fp, r9
 80023a6:	eb4c 060a 	adc.w	r6, ip, sl
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4619      	mov	r1, r3
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	f04f 0400 	mov.w	r4, #0
 80023bc:	0094      	lsls	r4, r2, #2
 80023be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023c2:	008b      	lsls	r3, r1, #2
 80023c4:	461a      	mov	r2, r3
 80023c6:	4623      	mov	r3, r4
 80023c8:	4628      	mov	r0, r5
 80023ca:	4631      	mov	r1, r6
 80023cc:	f7fd ff1a 	bl	8000204 <__aeabi_uldivmod>
 80023d0:	4603      	mov	r3, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <UART_SetConfig+0x5c0>)
 80023d8:	fba3 1302 	umull	r1, r3, r3, r2
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	2164      	movs	r1, #100	; 0x64
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	3332      	adds	r3, #50	; 0x32
 80023ea:	4a29      	ldr	r2, [pc, #164]	; (8002490 <UART_SetConfig+0x5c0>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f6:	4498      	add	r8, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	469b      	mov	fp, r3
 80023fc:	f04f 0c00 	mov.w	ip, #0
 8002400:	46d9      	mov	r9, fp
 8002402:	46e2      	mov	sl, ip
 8002404:	eb19 0309 	adds.w	r3, r9, r9
 8002408:	eb4a 040a 	adc.w	r4, sl, sl
 800240c:	4699      	mov	r9, r3
 800240e:	46a2      	mov	sl, r4
 8002410:	eb19 090b 	adds.w	r9, r9, fp
 8002414:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002424:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002428:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800242c:	4689      	mov	r9, r1
 800242e:	4692      	mov	sl, r2
 8002430:	eb1b 0509 	adds.w	r5, fp, r9
 8002434:	eb4c 060a 	adc.w	r6, ip, sl
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4619      	mov	r1, r3
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	f04f 0400 	mov.w	r4, #0
 800244a:	0094      	lsls	r4, r2, #2
 800244c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002450:	008b      	lsls	r3, r1, #2
 8002452:	461a      	mov	r2, r3
 8002454:	4623      	mov	r3, r4
 8002456:	4628      	mov	r0, r5
 8002458:	4631      	mov	r1, r6
 800245a:	f7fd fed3 	bl	8000204 <__aeabi_uldivmod>
 800245e:	4603      	mov	r3, r0
 8002460:	460c      	mov	r4, r1
 8002462:	461a      	mov	r2, r3
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <UART_SetConfig+0x5c0>)
 8002466:	fba3 1302 	umull	r1, r3, r3, r2
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2164      	movs	r1, #100	; 0x64
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	3332      	adds	r3, #50	; 0x32
 8002478:	4a05      	ldr	r2, [pc, #20]	; (8002490 <UART_SetConfig+0x5c0>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	f003 020f 	and.w	r2, r3, #15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4442      	add	r2, r8
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e0d7      	b.n	800263e <UART_SetConfig+0x76e>
 800248e:	bf00      	nop
 8002490:	51eb851f 	.word	0x51eb851f
 8002494:	40011000 	.word	0x40011000
 8002498:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800249c:	f7fe ff58 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 80024a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	469a      	mov	sl, r3
 80024a6:	f04f 0b00 	mov.w	fp, #0
 80024aa:	46d0      	mov	r8, sl
 80024ac:	46d9      	mov	r9, fp
 80024ae:	eb18 0308 	adds.w	r3, r8, r8
 80024b2:	eb49 0409 	adc.w	r4, r9, r9
 80024b6:	4698      	mov	r8, r3
 80024b8:	46a1      	mov	r9, r4
 80024ba:	eb18 080a 	adds.w	r8, r8, sl
 80024be:	eb49 090b 	adc.w	r9, r9, fp
 80024c2:	f04f 0100 	mov.w	r1, #0
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024d6:	4688      	mov	r8, r1
 80024d8:	4691      	mov	r9, r2
 80024da:	eb1a 0508 	adds.w	r5, sl, r8
 80024de:	eb4b 0609 	adc.w	r6, fp, r9
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4619      	mov	r1, r3
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	f04f 0400 	mov.w	r4, #0
 80024f4:	0094      	lsls	r4, r2, #2
 80024f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024fa:	008b      	lsls	r3, r1, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4623      	mov	r3, r4
 8002500:	4628      	mov	r0, r5
 8002502:	4631      	mov	r1, r6
 8002504:	f7fd fe7e 	bl	8000204 <__aeabi_uldivmod>
 8002508:	4603      	mov	r3, r0
 800250a:	460c      	mov	r4, r1
 800250c:	461a      	mov	r2, r3
 800250e:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <UART_SetConfig+0x778>)
 8002510:	fba3 2302 	umull	r2, r3, r3, r2
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	469b      	mov	fp, r3
 800251e:	f04f 0c00 	mov.w	ip, #0
 8002522:	46d9      	mov	r9, fp
 8002524:	46e2      	mov	sl, ip
 8002526:	eb19 0309 	adds.w	r3, r9, r9
 800252a:	eb4a 040a 	adc.w	r4, sl, sl
 800252e:	4699      	mov	r9, r3
 8002530:	46a2      	mov	sl, r4
 8002532:	eb19 090b 	adds.w	r9, r9, fp
 8002536:	eb4a 0a0c 	adc.w	sl, sl, ip
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002546:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800254a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800254e:	4689      	mov	r9, r1
 8002550:	4692      	mov	sl, r2
 8002552:	eb1b 0509 	adds.w	r5, fp, r9
 8002556:	eb4c 060a 	adc.w	r6, ip, sl
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	f04f 0400 	mov.w	r4, #0
 800256c:	0094      	lsls	r4, r2, #2
 800256e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002572:	008b      	lsls	r3, r1, #2
 8002574:	461a      	mov	r2, r3
 8002576:	4623      	mov	r3, r4
 8002578:	4628      	mov	r0, r5
 800257a:	4631      	mov	r1, r6
 800257c:	f7fd fe42 	bl	8000204 <__aeabi_uldivmod>
 8002580:	4603      	mov	r3, r0
 8002582:	460c      	mov	r4, r1
 8002584:	461a      	mov	r2, r3
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <UART_SetConfig+0x778>)
 8002588:	fba3 1302 	umull	r1, r3, r3, r2
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	2164      	movs	r1, #100	; 0x64
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	3332      	adds	r3, #50	; 0x32
 800259a:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <UART_SetConfig+0x778>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a6:	4498      	add	r8, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	469b      	mov	fp, r3
 80025ac:	f04f 0c00 	mov.w	ip, #0
 80025b0:	46d9      	mov	r9, fp
 80025b2:	46e2      	mov	sl, ip
 80025b4:	eb19 0309 	adds.w	r3, r9, r9
 80025b8:	eb4a 040a 	adc.w	r4, sl, sl
 80025bc:	4699      	mov	r9, r3
 80025be:	46a2      	mov	sl, r4
 80025c0:	eb19 090b 	adds.w	r9, r9, fp
 80025c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025dc:	4689      	mov	r9, r1
 80025de:	4692      	mov	sl, r2
 80025e0:	eb1b 0509 	adds.w	r5, fp, r9
 80025e4:	eb4c 060a 	adc.w	r6, ip, sl
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	f04f 0400 	mov.w	r4, #0
 80025fa:	0094      	lsls	r4, r2, #2
 80025fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002600:	008b      	lsls	r3, r1, #2
 8002602:	461a      	mov	r2, r3
 8002604:	4623      	mov	r3, r4
 8002606:	4628      	mov	r0, r5
 8002608:	4631      	mov	r1, r6
 800260a:	f7fd fdfb 	bl	8000204 <__aeabi_uldivmod>
 800260e:	4603      	mov	r3, r0
 8002610:	460c      	mov	r4, r1
 8002612:	461a      	mov	r2, r3
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <UART_SetConfig+0x778>)
 8002616:	fba3 1302 	umull	r1, r3, r3, r2
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2164      	movs	r1, #100	; 0x64
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	3332      	adds	r3, #50	; 0x32
 8002628:	4a07      	ldr	r2, [pc, #28]	; (8002648 <UART_SetConfig+0x778>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	f003 020f 	and.w	r2, r3, #15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4442      	add	r2, r8
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	e7ff      	b.n	800263e <UART_SetConfig+0x76e>
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002648:	51eb851f 	.word	0x51eb851f

0800264c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0

  HAL_Init();
 8002650:	f7fd ff58 	bl	8000504 <HAL_Init>

  SystemClock_Config();
 8002654:	f000 f818 	bl	8002688 <SystemClock_Config>


  MX_GPIO_Init();
 8002658:	f000 f8ae 	bl	80027b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800265c:	f000 f882 	bl	8002764 <MX_USART2_UART_Init>

  while (1)
 8002660:	e7fe      	b.n	8002660 <main+0x14>
	...

08002664 <HAL_GPIO_EXTI_Callback>:

  }

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);

    //Do something......
    //Let's toggle the LED

    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800266e:	2120      	movs	r1, #32
 8002670:	4804      	ldr	r0, [pc, #16]	; (8002684 <HAL_GPIO_EXTI_Callback+0x20>)
 8002672:	f7fe fc7b 	bl	8000f6c <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8002676:	2064      	movs	r0, #100	; 0x64
 8002678:	f7fd ffb6 	bl	80005e8 <HAL_Delay>
  }
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40020000 	.word	0x40020000

08002688 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b094      	sub	sp, #80	; 0x50
 800268c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	2234      	movs	r2, #52	; 0x34
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fa22 	bl	8002ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	4b2a      	ldr	r3, [pc, #168]	; (800275c <SystemClock_Config+0xd4>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a29      	ldr	r2, [pc, #164]	; (800275c <SystemClock_Config+0xd4>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6413      	str	r3, [r2, #64]	; 0x40
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <SystemClock_Config+0xd4>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026c8:	2300      	movs	r3, #0
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4b24      	ldr	r3, [pc, #144]	; (8002760 <SystemClock_Config+0xd8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026d4:	4a22      	ldr	r2, [pc, #136]	; (8002760 <SystemClock_Config+0xd8>)
 80026d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b20      	ldr	r3, [pc, #128]	; (8002760 <SystemClock_Config+0xd8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026e8:	2302      	movs	r3, #2
 80026ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ec:	2301      	movs	r3, #1
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026f0:	2310      	movs	r3, #16
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f4:	2302      	movs	r3, #2
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026f8:	2300      	movs	r3, #0
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80026fc:	2310      	movs	r3, #16
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002700:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002704:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002706:	2304      	movs	r3, #4
 8002708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800270a:	2302      	movs	r3, #2
 800270c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800270e:	2302      	movs	r3, #2
 8002710:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe ffe2 	bl	80016e0 <HAL_RCC_OscConfig>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002722:	f000 f8c1 	bl	80028a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002726:	230f      	movs	r3, #15
 8002728:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800272a:	2302      	movs	r3, #2
 800272c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	2102      	movs	r1, #2
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fc52 	bl	8000fec <HAL_RCC_ClockConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800274e:	f000 f8ab 	bl	80028a8 <Error_Handler>
  }
}
 8002752:	bf00      	nop
 8002754:	3750      	adds	r7, #80	; 0x50
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000

08002764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 800276c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800279c:	f7ff fabe 	bl	8001d1c <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027a6:	f000 f87f 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000002c 	.word	0x2000002c
 80027b4:	40004400 	.word	0x40004400

080027b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <MX_GPIO_Init+0xe0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a30      	ldr	r2, [pc, #192]	; (8002898 <MX_GPIO_Init+0xe0>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <MX_GPIO_Init+0xe0>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <MX_GPIO_Init+0xe0>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a29      	ldr	r2, [pc, #164]	; (8002898 <MX_GPIO_Init+0xe0>)
 80027f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <MX_GPIO_Init+0xe0>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <MX_GPIO_Init+0xe0>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a22      	ldr	r2, [pc, #136]	; (8002898 <MX_GPIO_Init+0xe0>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <MX_GPIO_Init+0xe0>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <MX_GPIO_Init+0xe0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a1b      	ldr	r2, [pc, #108]	; (8002898 <MX_GPIO_Init+0xe0>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b19      	ldr	r3, [pc, #100]	; (8002898 <MX_GPIO_Init+0xe0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	2120      	movs	r1, #32
 8002842:	4816      	ldr	r0, [pc, #88]	; (800289c <MX_GPIO_Init+0xe4>)
 8002844:	f7fe fb60 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_Interrupt_Pin */
  GPIO_InitStruct.Pin = GPIO_Interrupt_Pin;
 8002848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800284c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_GPIO_Init+0xe8>)
 8002850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	4811      	ldr	r0, [pc, #68]	; (80028a4 <MX_GPIO_Init+0xec>)
 800285e:	f7fe f825 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002862:	2320      	movs	r3, #32
 8002864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	2301      	movs	r3, #1
 8002868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	4808      	ldr	r0, [pc, #32]	; (800289c <MX_GPIO_Init+0xe4>)
 800287a:	f7fe f817 	bl	80008ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	2028      	movs	r0, #40	; 0x28
 8002884:	f7fd ffc2 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002888:	2028      	movs	r0, #40	; 0x28
 800288a:	f7fd ffeb 	bl	8000864 <HAL_NVIC_EnableIRQ>

}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40020000 	.word	0x40020000
 80028a0:	10110000 	.word	0x10110000
 80028a4:	40020800 	.word	0x40020800

080028a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_MspInit+0x4c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <HAL_MspInit+0x4c>)
 80028dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_MspInit+0x4c>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_MspInit+0x4c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_MspInit+0x4c>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_MspInit+0x4c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800290a:	2007      	movs	r0, #7
 800290c:	f7fd ff5e 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800

0800291c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_UART_MspInit+0x84>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d12b      	bne.n	8002996 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <HAL_UART_MspInit+0x88>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <HAL_UART_MspInit+0x88>)
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_UART_MspInit+0x88>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_UART_MspInit+0x88>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <HAL_UART_MspInit+0x88>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_UART_MspInit+0x88>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002976:	230c      	movs	r3, #12
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002986:	2307      	movs	r3, #7
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <HAL_UART_MspInit+0x8c>)
 8002992:	f7fd ff8b 	bl	80008ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3728      	adds	r7, #40	; 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40004400 	.word	0x40004400
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020000 	.word	0x40020000

080029ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029be:	e7fe      	b.n	80029be <HardFault_Handler+0x4>

080029c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <MemManage_Handler+0x4>

080029c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ca:	e7fe      	b.n	80029ca <BusFault_Handler+0x4>

080029cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <UsageFault_Handler+0x4>

080029d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a00:	f7fd fdd2 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a10:	f7fe fad4 	bl	8000fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <SystemInit+0x28>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <SystemInit+0x28>)
 8002a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SystemInit+0x28>)
 8002a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a32:	609a      	str	r2, [r3, #8]
#endif
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a4a:	e003      	b.n	8002a54 <LoopCopyDataInit>

08002a4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a52:	3104      	adds	r1, #4

08002a54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a5c:	d3f6      	bcc.n	8002a4c <CopyDataInit>
  ldr  r2, =_sbss
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a60:	e002      	b.n	8002a68 <LoopFillZerobss>

08002a62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a64:	f842 3b04 	str.w	r3, [r2], #4

08002a68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a6c:	d3f9      	bcc.n	8002a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a6e:	f7ff ffd3 	bl	8002a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a72:	f000 f811 	bl	8002a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a76:	f7ff fde9 	bl	800264c <main>
  bx  lr    
 8002a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a80:	08002c58 	.word	0x08002c58
  ldr  r0, =_sdata
 8002a84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a88:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002a8c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002a90:	2000006c 	.word	0x2000006c

08002a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <ADC_IRQHandler>
	...

08002a98 <__libc_init_array>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	4e0d      	ldr	r6, [pc, #52]	; (8002ad0 <__libc_init_array+0x38>)
 8002a9c:	4c0d      	ldr	r4, [pc, #52]	; (8002ad4 <__libc_init_array+0x3c>)
 8002a9e:	1ba4      	subs	r4, r4, r6
 8002aa0:	10a4      	asrs	r4, r4, #2
 8002aa2:	2500      	movs	r5, #0
 8002aa4:	42a5      	cmp	r5, r4
 8002aa6:	d109      	bne.n	8002abc <__libc_init_array+0x24>
 8002aa8:	4e0b      	ldr	r6, [pc, #44]	; (8002ad8 <__libc_init_array+0x40>)
 8002aaa:	4c0c      	ldr	r4, [pc, #48]	; (8002adc <__libc_init_array+0x44>)
 8002aac:	f000 f820 	bl	8002af0 <_init>
 8002ab0:	1ba4      	subs	r4, r4, r6
 8002ab2:	10a4      	asrs	r4, r4, #2
 8002ab4:	2500      	movs	r5, #0
 8002ab6:	42a5      	cmp	r5, r4
 8002ab8:	d105      	bne.n	8002ac6 <__libc_init_array+0x2e>
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ac0:	4798      	blx	r3
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	e7ee      	b.n	8002aa4 <__libc_init_array+0xc>
 8002ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aca:	4798      	blx	r3
 8002acc:	3501      	adds	r5, #1
 8002ace:	e7f2      	b.n	8002ab6 <__libc_init_array+0x1e>
 8002ad0:	08002c50 	.word	0x08002c50
 8002ad4:	08002c50 	.word	0x08002c50
 8002ad8:	08002c50 	.word	0x08002c50
 8002adc:	08002c54 	.word	0x08002c54

08002ae0 <memset>:
 8002ae0:	4402      	add	r2, r0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d100      	bne.n	8002aea <memset+0xa>
 8002ae8:	4770      	bx	lr
 8002aea:	f803 1b01 	strb.w	r1, [r3], #1
 8002aee:	e7f9      	b.n	8002ae4 <memset+0x4>

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr
